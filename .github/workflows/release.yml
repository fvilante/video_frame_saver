name: Build and Release Video Frame Recorder

on:
  push:
    tags:
      - 'v*' # Trigger on version tags
  workflow_dispatch: # Permite execução manual pelo GitHub

permissions:
  contents: write

jobs:
  build:
    runs-on: windows-2022  # Use Windows environment

    steps:
      # Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Install Chocolatey and dependencies (LLVM and OpenCV)
      - name: Install dependencies via Chocolatey
        run: |
          Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.SecurityProtocolType]::Tls12; iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
      
      - name: Reinstalar llvm versão específica
        run: |
            choco uninstall llvm -y
            choco install llvm --version=19.1.3 --confirm --no-progress

      - name: Reinstalar OpenCV versão específica
        run: |
            choco install opencv --version=4.10.0 --confirm --no-progress

      # Set OpenCV environment variables
      - name: Set OpenCV environment variables
        run: |
          echo "OPENCV_INCLUDE_PATHS=C:\\tools\\opencv\\build\\include" >> $env:GITHUB_ENV
          echo "OPENCV_LINK_LIBS=opencv_world4100" >> $env:GITHUB_ENV
          echo "OPENCV_LINK_PATHS=C:\\tools\\opencv\\build\\x64\\vc16\\lib" >> $env:GITHUB_ENV
          echo "C:\\tools\\opencv\\build\\x64\\vc16\\bin" >> $env:GITHUB_PATH

      # Setup Rust
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          override: true
          toolchain: 1.85.0

      # Build project
      - name: Build project
        run: cargo build --release

      # Copy OpenCV DLL
      - name: Copy OpenCV DLL
        run: |
          copy "C:\\tools\\opencv\\build\\x64\\vc16\\bin\\opencv_world4100.dll" ".\\opencv_world4100.dll"

      # Criar a pasta release_files antes de copiar arquivos
      - name: Criar pasta release_files
        run: mkdir release_files

      # Copiar GUIA_DE_USO.txt para a pasta release_files
      - name: Adicionar README.txt ao release
        run: copy resources/GUIA_DE_USO.txt release_files/

      # Package files into a ZIP
      - name: Package executable and DLL into a ZIP file
        run: |
          copy target/release/video_frame_saver.exe release_files/
          copy opencv_world4100.dll release_files/
          copy CHANGELOG.md release_files/
          powershell Compress-Archive -Path release_files\* -DestinationPath video_frame_saver-${{ github.ref_name }}-windows-x64.zip

      # Upload ZIP to GitHub Release
      - name: Upload ZIP to GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: video_frame_saver-${{ github.ref_name }}-windows-x64.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
