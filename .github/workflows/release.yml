name: Build and Release Video Frame Recorder

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    runs-on: windows-2022

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Cache LLVM e OpenCV para evitar reinstalação desnecessária
      - name: Cache LLVM e OpenCV
        id: cache-deps
        uses: actions/cache@v3
        with:
          path: |
            C:\Program Files\LLVM
            C:\tools\opencv
          key: deps-windows-llvm19-opencv410

      # Instalar dependências apenas se não estiverem no cache
      - name: Instalar LLVM e OpenCV (se necessário)
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: |
          choco install llvm --version=19.1.3 --confirm --no-progress
          choco install opencv --version=4.10.0 --confirm --no-progress

      # Definir variáveis de ambiente para compilar OpenCV com Rust
      - name: Configurar OpenCV
        run: |
          echo "OPENCV_INCLUDE_PATHS=C:\tools\opencv\build\include" >> $env:GITHUB_ENV
          echo "OPENCV_LINK_LIBS=opencv_world4100" >> $env:GITHUB_ENV
          echo "OPENCV_LINK_PATHS=C:\tools\opencv\build\x64\vc16\lib" >> $env:GITHUB_ENV
          echo "C:\tools\opencv\build\x64\vc16\bin" >> $env:GITHUB_PATH

      # Configurar Rust com cache
      - name: Cache Cargo
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: cargo-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          override: true
          toolchain: 1.85.0

      - name: Build project
        run: cargo build --release

      # Copiar DLL e preparar release
      - name: Preparar arquivos para release
        run: |
          mkdir release_files
          copy "C:\tools\opencv\build\x64\vc16\bin\opencv_world4100.dll" "release_files\opencv_world4100.dll"
          copy target/release/video_frame_saver.exe release_files/
          copy docs/GUIA_DE_USO.txt release_files/
          copy docs/CODIGOS_DE_ERRO.txt release_files/
          copy CHANGELOG.md release_files/
          copy docs/MANUAL_COMPLETO.md release_files/
          copy README.md release_files/

      # Criar ZIP
      - name: Compactar release
        run: powershell Compress-Archive -Path release_files\* -DestinationPath video_frame_saver-${{ github.ref_name }}-windows-x64.zip

      # Upload para o GitHub Releases
      - name: Upload ZIP para GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: video_frame_saver-${{ github.ref_name }}-windows-x64.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
