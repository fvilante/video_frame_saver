name: Build and Release Video Frame Recorder

on:
  push:
    tags:
      - 'v*' # Trigger on version tags

permissions:
  contents: write

jobs:
  build:
    runs-on: windows-latest  # Use Windows environment

    steps:
      # Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Install Chocolatey and dependencies (LLVM and OpenCV)
      - name: Install dependencies via Chocolatey
        run: |
          Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.SecurityProtocolType]::Tls12; iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
          choco install llvm opencv --no-progress --confirm

      # Set OpenCV environment variables
      - name: Set OpenCV environment variables
        run: |
          echo "OPENCV_INCLUDE_PATHS=C:\\tools\\opencv\\build\\include" >> $env:GITHUB_ENV
          echo "OPENCV_LINK_LIBS=opencv_world4100" >> $env:GITHUB_ENV
          echo "OPENCV_LINK_PATHS=C:\\tools\\opencv\\build\\x64\\vc16\\lib" >> $env:GITHUB_ENV
          echo "C:\\tools\\opencv\\build\\x64\\vc16\\bin" >> $env:GITHUB_PATH

      # Setup Rust
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          override: true
          toolchain: stable

      # Build project
      - name: Build project
        run: cargo build --release

      # Copy OpenCV DLL
      - name: Copy OpenCV DLL
        run: |
          copy "C:\\tools\\opencv\\build\\x64\\vc16\\bin\\opencv_world4100.dll" ".\\opencv_world4100.dll"

      # Upload assets to GitHub Release
      - name: Upload assets to GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            target/release/video_frame_recorder.exe
            opencv_world4100.dll
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
